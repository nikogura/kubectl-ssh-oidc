name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  GO_VERSION: '1.24'

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.semver.outputs.version_tag }}
      version: ${{ steps.semver.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Semver
      uses: paulhatch/semantic-version@v5.4.0
      with:
        bump_each_commit: true
        tag_prefix: "v"
        format: "${major}.${minor}.${patch}"
      id: semver

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests first
      run: make test

    - name: Lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        verify: false

    - name: Lint Checks
      run: make lint

    # Integration tests using Docker Compose with hoverkraft-tech/compose-action
    # This approach works better in GitHub Actions than the Makefile approach
    # For local development, you can still use: make test-integration-local
    - name: Generate SSH test keys
      run: |
        # Generate test SSH keys for integration tests
        mkdir -p /tmp/integration-test-keys

        # Generate 3 test keys and capture their fingerprints
        for i in 1 2 3; do
          ssh-keygen -t ed25519 -f "/tmp/integration-test-keys/test_key_${i}" -N "" -C "integration-test-${i}"
          fingerprint=$(ssh-keygen -lf "/tmp/integration-test-keys/test_key_${i}.pub" | awk '{print $2}')
          echo "TEST_KEY_FINGERPRINT_${i}=$fingerprint" >> $GITHUB_ENV
          echo "TEST_KEY_PATH_${i}=/tmp/integration-test-keys/test_key_${i}" >> $GITHUB_ENV
          echo "Generated key ${i}: $fingerprint"
        done

    - name: Run integration tests
      uses: hoverkraft-tech/compose-action@v2.0.1
      with:
        compose-file: "./test/integration/docker-compose.yml"
        up-flags: "--build"
        down-flags: "--volumes --remove-orphans"
      env:
        TEST_KEY_FINGERPRINT_1: ${{ env.TEST_KEY_FINGERPRINT_1 }}
        TEST_KEY_FINGERPRINT_2: ${{ env.TEST_KEY_FINGERPRINT_2 }}
        TEST_KEY_FINGERPRINT_3: ${{ env.TEST_KEY_FINGERPRINT_3 }}

    - name: Execute integration tests
      run: |
        # Use the optimized local Go test approach since services are already running
        INTEGRATION_TEST=true go test -v -timeout 120s ./test/integration
      timeout-minutes: 10
      env:
        TEST_KEY_FINGERPRINT_1: ${{ env.TEST_KEY_FINGERPRINT_1 }}
        TEST_KEY_FINGERPRINT_2: ${{ env.TEST_KEY_FINGERPRINT_2 }}
        TEST_KEY_FINGERPRINT_3: ${{ env.TEST_KEY_FINGERPRINT_3 }}
        TEST_KEY_PATH_1: ${{ env.TEST_KEY_PATH_1 }}
        TEST_KEY_PATH_2: ${{ env.TEST_KEY_PATH_2 }}
        TEST_KEY_PATH_3: ${{ env.TEST_KEY_PATH_3 }}

    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-logs-${{ github.run_id }}
        path: |
          test/integration/*.log
          /tmp/kubectl-ssh-oidc-integration-*/
        retention-days: 7

    - name: Clean up integration environment
      if: always()
      run: make clean-integration

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Tag Repo
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: ${{ needs.test.outputs.version_tag }}

    - name: Publish Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.test.outputs.version_tag }}
        name: ${{ needs.test.outputs.version_tag }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}